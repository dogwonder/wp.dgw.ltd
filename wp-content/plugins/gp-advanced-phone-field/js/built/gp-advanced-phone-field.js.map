{"version":3,"file":"gp-advanced-phone-field.js","mappings":"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","sources":["webpack://gp-advanced-phone-field/./node_modules/intl-tel-input/build/js/intlTelInput.js","webpack://gp-advanced-phone-field/./node_modules/intl-tel-input/index.js","webpack://gp-advanced-phone-field/webpack/bootstrap","webpack://gp-advanced-phone-field/webpack/runtime/compat get default export","webpack://gp-advanced-phone-field/webpack/runtime/define property getters","webpack://gp-advanced-phone-field/webpack/runtime/hasOwnProperty shorthand","webpack://gp-advanced-phone-field/./js/src/frontend.ts"],"sourcesContent":["/*\n * International Telephone Input v18.5.3\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan\", \"af\", \"93\" ], [ \"Albania\", \"al\", \"355\" ], [ \"Algeria\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua & Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria\", \"at\", \"43\" ], [ \"Azerbaijan\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain\", \"bh\", \"973\" ], [ \"Bangladesh\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus\", \"by\", \"375\" ], [ \"Belgium\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia & Herzegovina\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi\", \"bi\", \"257\" ], [ \"Cambodia\", \"kh\", \"855\" ], [ \"Cameroon\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic\", \"cf\", \"236\" ], [ \"Chad\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros\", \"km\", \"269\" ], [ \"Congo - Brazzaville\", \"cg\", \"242\" ], [ \"Congo - Kinshasa\", \"cd\", \"243\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus\", \"cy\", \"357\" ], [ \"Czech Republic\", \"cz\", \"420\" ], [ \"Denmark\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands\", \"fk\", \"500\" ], [ \"Faroe Islands\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana\", \"gf\", \"594\" ], [ \"French Polynesia\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia\", \"ge\", \"995\" ], [ \"Germany\", \"de\", \"49\" ], [ \"Ghana\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece\", \"gr\", \"30\" ], [ \"Greenland\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea\", \"gn\", \"224\" ], [ \"Guinea-Bissau\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong\", \"hk\", \"852\" ], [ \"Hungary\", \"hu\", \"36\" ], [ \"Iceland\", \"is\", \"354\" ], [ \"India\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran\", \"ir\", \"98\" ], [ \"Iraq\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel\", \"il\", \"972\" ], [ \"Italy\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan\", \"jo\", \"962\" ], [ \"Kazakhstan\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait\", \"kw\", \"965\" ], [ \"Kyrgyzstan\", \"kg\", \"996\" ], [ \"Laos\", \"la\", \"856\" ], [ \"Latvia\", \"lv\", \"371\" ], [ \"Lebanon\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau\", \"mo\", \"853\" ], [ \"Madagascar\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania\", \"mr\", \"222\" ], [ \"Mauritius\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia\", \"mn\", \"976\" ], [ \"Montenegro\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco\", \"ma\", \"212\", 0 ], [ \"Mozambique\", \"mz\", \"258\" ], [ \"Myanmar (Burma)\", \"mm\", \"95\" ], [ \"Namibia\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal\", \"np\", \"977\" ], [ \"Netherlands\", \"nl\", \"31\" ], [ \"New Caledonia\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea\", \"kp\", \"850\" ], [ \"North Macedonia\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway\", \"no\", \"47\", 0 ], [ \"Oman\", \"om\", \"968\" ], [ \"Pakistan\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine\", \"ps\", \"970\" ], [ \"Panama\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar\", \"qa\", \"974\" ], [ \"Réunion\", \"re\", \"262\", 0 ], [ \"Romania\", \"ro\", \"40\" ], [ \"Russia\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé & Príncipe\", \"st\", \"239\" ], [ \"Saudi Arabia\", \"sa\", \"966\" ], [ \"Senegal\", \"sn\", \"221\" ], [ \"Serbia\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia\", \"sk\", \"421\" ], [ \"Slovenia\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea\", \"kr\", \"82\" ], [ \"South Sudan\", \"ss\", \"211\" ], [ \"Spain\", \"es\", \"34\" ], [ \"Sri Lanka\", \"lk\", \"94\" ], [ \"St Barthélemy\", \"bl\", \"590\", 1 ], [ \"St Helena\", \"sh\", \"290\" ], [ \"St Kitts & Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"St Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"St Martin\", \"mf\", \"590\", 2 ], [ \"St Pierre & Miquelon\", \"pm\", \"508\" ], [ \"St Vincent & Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Sudan\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard & Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden\", \"se\", \"46\" ], [ \"Switzerland\", \"ch\", \"41\" ], [ \"Syria\", \"sy\", \"963\" ], [ \"Taiwan\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad & Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia\", \"tn\", \"216\" ], [ \"Turkey\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks & Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine\", \"ua\", \"380\" ], [ \"United Arab Emirates\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"US Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uzbekistan\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam\", \"vn\", \"84\" ], [ \"Wallis & Futuna\", \"wf\", \"681\" ], [ \"Western Sahara\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _objectSpread(target) {\n            for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i] != null ? Object(arguments[i]) : {};\n                var ownKeys = Object.keys(source);\n                if (typeof Object.getOwnPropertySymbols === \"function\") {\n                    ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                    }));\n                }\n                ownKeys.forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            }\n            return target;\n        }\n        function _defineProperty(obj, key, value) {\n            key = _toPropertyKey(key);\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n                writable: false\n            });\n            return Constructor;\n        }\n        function _toPropertyKey(arg) {\n            var key = _toPrimitive(arg, \"string\");\n            return typeof key === \"symbol\" ? key : String(key);\n        }\n        function _toPrimitive(input, hint) {\n            if (typeof input !== \"object\" || input === null) return input;\n            var prim = input[Symbol.toPrimitive];\n            if (prim !== undefined) {\n                var res = prim.call(input, hint || \"default\");\n                if (typeof res !== \"object\") return res;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (hint === \"string\" ? String : Number)(input);\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") {\n            window.intlTelInputGlobals = intlTelInputGlobals;\n        }\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // auto insert dial code (A) on init, (B) on user selecting a country, (C) on calling setCountry\n            // also listen for blur/submit and auto remove dial code if that's all there is\n            autoInsertDialCode: false,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // add a country search input at the top of the dropdown\n            countrySearch: false,\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // fix the dropdown width to the input width (rather than being as wide as the longest country name)\n            fixDropdownWidth: false,\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag\n            separateDialCode: false,\n            // option to hide the flags - must be used with separateDialCode, or allowDropdown=false\n            showFlags: true,\n            // use full screen popup instead of dropdown for country list\n            useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ? // we cannot just test screen size as some smartphones/website meta tags will report desktop\n            // resolutions\n            // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n            /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500 : false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/ function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if showing fullscreen popup, do not fix the width\n                    if (this.options.useFullscreenPopup) {\n                        this.options.fixDropdownWidth = false;\n                    }\n                    // when search enabled, we must fix the width else it would change with different results\n                    if (this.options.countrySearch && !this.options.useFullscreenPopup) {\n                        this.options.fixDropdownWidth = true;\n                    }\n                    // if in nationalMode, do not insert dial codes\n                    if (this.options.nationalMode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // if separateDialCode enabled, do not insert dial codes\n                    if (this.options.separateDialCode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n                    // as otherwise you just have a down arrow on it's own which doesn't make sense\n                    var forceShowFlags = this.options.allowDropdown && !this.options.separateDialCode;\n                    if (!this.options.showFlags && forceShowFlags) {\n                        this.options.showFlags = true;\n                    }\n                    // on mobile, we want a full screen dropdown, so we must append it to the body\n                    if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n                        this.options.dropdownContainer = document.body;\n                    }\n                    // check if input has one parent with RTL\n                    this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoInsertDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) {\n                        this._translateCountriesByLocale();\n                    }\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) {\n                            return;\n                        }\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    if (a.name < b.name) {\n                        return -1;\n                    }\n                    if (a.name > b.name) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) {\n                            this.dialCodes[c.dialCode] = true;\n                        }\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) {\n                            this.preferredCountries.push(countryData);\n                        }\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) {\n                        forEachProp(attrs, function(key, value) {\n                            return el.setAttribute(key, value);\n                        });\n                    }\n                    if (container) {\n                        container.appendChild(el);\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    this.telInput.classList.add(\"iti__tel-input\");\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    var _this$options = this.options, allowDropdown = _this$options.allowDropdown, separateDialCode = _this$options.separateDialCode, showFlags = _this$options.showFlags, customContainer = _this$options.customContainer, hiddenInput = _this$options.hiddenInput, dropdownContainer = _this$options.dropdownContainer, fixDropdownWidth = _this$options.fixDropdownWidth, useFullscreenPopup = _this$options.useFullscreenPopup, countrySearch = _this$options.countrySearch;\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (allowDropdown) {\n                        parentClass += \" iti--allow-dropdown\";\n                    }\n                    if (separateDialCode) {\n                        parentClass += \" iti--separate-dial-code\";\n                    }\n                    if (showFlags) {\n                        parentClass += \" iti--show-flags\";\n                    }\n                    if (customContainer) {\n                        parentClass += \" \".concat(customContainer);\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    // only hide the flagsContainer if allowDropdown, showFlags and separateDialCode are all false\n                    var showFlagsContainer = allowDropdown || showFlags || separateDialCode;\n                    if (showFlagsContainer) {\n                        this.flagsContainer = this._createEl(\"div\", {\n                            \"class\": \"iti__flag-container\"\n                        }, wrapper);\n                    }\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    // using Aria tags for \"Select-Only Combobox Example\"\n                    // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n                    if (showFlagsContainer) {\n                        this.selectedFlag = this._createEl(\"div\", _objectSpread({\n                            \"class\": \"iti__selected-flag\"\n                        }, allowDropdown && {\n                            role: \"combobox\",\n                            \"aria-haspopup\": \"listbox\",\n                            \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                            \"aria-expanded\": \"false\",\n                            \"aria-label\": \"Telephone country code\"\n                        }), this.flagsContainer);\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner = this._createEl(\"div\", {\n                            \"class\": \"iti__flag\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.selectedFlag && this.telInput.disabled) {\n                        this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n                    }\n                    if (separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (allowDropdown) {\n                        if (!this.telInput.disabled) {\n                            // make element focusable and tab navigable\n                            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        }\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        var extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n                        this.dropdownContent = this._createEl(\"div\", {\n                            \"class\": \"iti__dropdown-content iti__hide \".concat(extraClasses)\n                        });\n                        if (countrySearch) {\n                            this.searchInput = this._createEl(\"input\", {\n                                type: \"text\",\n                                \"class\": \"iti__search-input\",\n                                placeholder: \"Search\"\n                            }, this.dropdownContent);\n                        }\n                        // country list: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        }, this.dropdownContent);\n                        if (this.preferredCountries.length && !countrySearch) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                \"aria-hidden\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (dropdownContainer) {\n                            var dropdownClasses = \"iti iti--container\";\n                            if (useFullscreenPopup) {\n                                dropdownClasses += \" iti--fullscreen-popup\";\n                            }\n                            if (countrySearch) {\n                                dropdownClasses += \" iti--country-search\";\n                            }\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": dropdownClasses\n                            });\n                            this.dropdown.appendChild(this.dropdownContent);\n                        } else {\n                            this.flagsContainer.appendChild(this.dropdownContent);\n                        }\n                    }\n                    if (hiddenInput) {\n                        var hiddenInputName = hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) {\n                                hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                            }\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        var listItem = this._createEl(\"li\", {\n                            id: \"iti-\".concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix),\n                            \"class\": \"iti__country \".concat(className),\n                            tabindex: \"-1\",\n                            role: \"option\",\n                            \"data-dial-code\": c.dialCode,\n                            \"data-country-code\": c.iso2,\n                            \"aria-selected\": \"false\"\n                        }, this.countryList);\n                        // store this for later use e.g. country search filtering\n                        c.node = listItem;\n                        var content = \"\";\n                        // add the flag\n                        if (this.options.showFlags) {\n                            content += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        }\n                        // and the country name and dial code\n                        content += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        content += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        listItem.insertAdjacentHTML(\"beforeend\", content);\n                    }\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options2 = this.options, initialCountry = _this$options2.initialCountry, autoInsertDialCode = _this$options2.autoInsertDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        var isValidInitialCountry = initialCountry && this._getCountryData(initialCountry, false, true);\n                        // see if we should select a flag\n                        if (isValidInitialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and autoInsertDialCode then insert the dial code\n                        if (!val && autoInsertDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) {\n                        this._updateValFromNumber(val);\n                    }\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoInsertDialCode) {\n                        this._initBlurListeners();\n                    }\n                    if (this.options.allowDropdown) {\n                        this._initDropdownListeners();\n                    }\n                    if (this.hiddenInput) {\n                        this._initHiddenInputListener();\n                    }\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.dropdownContent.classList.contains(\"iti__hide\")) {\n                            _this4.telInput.focus();\n                        } else {\n                            e.preventDefault();\n                        }\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) {\n                        label.addEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.dropdownContent.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown if selected flag is focused and they press up/down/space/enter\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.dropdownContent.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"ArrowDown\", \" \", \"Enter\" ].includes(e.key)) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") {\n                            _this4._closeDropdown();\n                        }\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else {\n                        this.resolveUtilsScriptPromise();\n                    }\n                    if (this.options.initialCountry === \"auto\") {\n                        this._loadAutoCountry();\n                    } else {\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    }\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    if (this.options.fixDropdownWidth) {\n                        this.dropdownContent.style.width = \"\".concat(this.telInput.offsetWidth, \"px\");\n                    }\n                    this.dropdownContent.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    if (this.options.countrySearch) {\n                        // start by highlighting the first item in the list\n                        this._highlightListItem(this.countryList.firstElementChild, false);\n                        this.searchInput.focus();\n                    } else if (this.activeItem) {\n                        // update highlighting and scroll to active list item\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) {\n                        el.classList.add(className);\n                    } else if (!shouldHaveClass && el.classList.contains(className)) {\n                        el.classList.remove(className);\n                    }\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.options.useFullscreenPopup) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.dropdownContent.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // dont allow positioning above when country search enabled as the search box jumps around as you filter countries\n                        var positionDropdownAboveInput = !this.options.countrySearch && !dropdownFitsBelow && dropdownFitsAbove;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.dropdownContent, \"iti__dropdown-content--dropup\", positionDropdownAboveInput);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = positionDropdownAboveInput ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._highlightListItem(listItem, false);\n                        }\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._selectListItem(listItem);\n                        }\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) {\n                            _this9._closeDropdown();\n                        }\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or escape to close\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        if ([ \"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\" ].includes(e.key)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            // up and down to navigate\n                            if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n                                _this9._handleUpDownKey(e.key);\n                            } else if (e.key === \"Enter\") {\n                                _this9._handleEnterKey();\n                            } else if (e.key === \"Escape\") {\n                                _this9._closeDropdown();\n                            }\n                        }\n                        // alpha chars to perform search\n                        // regex allows one latin alpha char or space, based on https://stackoverflow.com/a/26900132/217866)\n                        if (!_this9.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            e.stopPropagation();\n                            // jump to countries that start with the query string\n                            if (queryTimer) {\n                                clearTimeout(queryTimer);\n                            }\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    if (this.options.countrySearch) {\n                        var doFilter = function doFilter() {\n                            var inputQuery = _this9.searchInput.value.trim();\n                            if (inputQuery) {\n                                _this9._filterCountries(inputQuery.toLowerCase());\n                            } else {\n                                _this9._filterCountries(null, true);\n                            }\n                        };\n                        var keyupTimer = null;\n                        this._handleSearchChange = function() {\n                            // filtering country nodes is expensive (lots of DOM manipulation), so rate limit it\n                            if (keyupTimer) {\n                                clearTimeout(keyupTimer);\n                            }\n                            keyupTimer = setTimeout(function() {\n                                doFilter();\n                                keyupTimer = null;\n                            }, 100);\n                        };\n                        this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n                        // stop propagation on search input click, so doesn't trigger click-off-to-close listener\n                        this.searchInput.addEventListener(\"click\", function(e) {\n                            return e.stopPropagation();\n                        });\n                    }\n                }\n            }, {\n                key: \"_filterCountries\",\n                value: function _filterCountries(query) {\n                    var isReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                    var isFirst = true;\n                    this.countryList.innerHTML = \"\";\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        var nameLower = c.name.toLowerCase();\n                        var fullDialCode = \"+\".concat(c.dialCode);\n                        if (isReset || nameLower.includes(query) || fullDialCode.includes(query)) {\n                            this.countryList.appendChild(c.node);\n                            // highlight the first item\n                            if (isFirst) {\n                                this._highlightListItem(c.node, false);\n                                isFirst = false;\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                    } else if (this.countryList.childElementCount > 1) {\n                        // otherwise, we must be at the end, so loop round again\n                        next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n                    }\n                    if (next) {\n                        // if country search enabled, dont lose focus from the search input on up/down\n                        var doFocus = !this.options.countrySearch;\n                        this._highlightListItem(next, doFocus);\n                        if (this.options.countrySearch) {\n                            this._scrollTo(next, false);\n                        }\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) {\n                        this._selectListItem(this.highlightedItem);\n                    }\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countries[i].node;\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(fullNumber) {\n                    var number = fullNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.separateDialCode;\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(fullNumber) {\n                    var plusIndex = fullNumber.indexOf(\"+\");\n                    // if it contains a plus, discard any chars before it e.g. accidental space char.\n                    // this keeps the selected country auto-updating correctly, which we want as\n                    // libphonenumber's validation/getNumber methods will ignore these chars anyway\n                    var number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n                    // if we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") {\n                            number = \"1\".concat(number);\n                        }\n                        number = \"+\".concat(number);\n                    }\n                    // if separateDialCode enabled, then consider the selected dial code to be part of the number\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) {\n                        prevItem.classList.remove(\"iti__highlight\");\n                    }\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                    if (shouldFocus) {\n                        this.highlightedItem.focus();\n                    }\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var _this$options3 = this.options, allowDropdown = _this$options3.allowDropdown, separateDialCode = _this$options3.separateDialCode, showFlags = _this$options3.showFlags;\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    }\n                    this._setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode);\n                    if (separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        if (this.isRTL) {\n                            this.telInput.style.paddingRight = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        } else {\n                            this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        }\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_setSelectedCountryFlagTitleAttribute\",\n                value: function _setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode) {\n                    if (!this.selectedFlag) {\n                        return;\n                    }\n                    var title;\n                    if (countryCode && !separateDialCode) {\n                        title = \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode);\n                    } else if (countryCode) {\n                        // For screen reader output, we don't want to include the dial code in the reader output twice\n                        // so just use the selected country name here:\n                        title = this.selectedCountryData.name;\n                    } else {\n                        title = \"Unknown\";\n                    }\n                    this.selectedFlag.setAttribute(\"title\", title);\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with auto inserting dial code),\n                    // who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.dropdownContent.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    if (this.options.countrySearch) {\n                        this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n                    }\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.options.useFullscreenPopup) {\n                            window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                        if (this.dropdown.parentNode) {\n                            this.dropdown.parentNode.removeChild(this.dropdown);\n                        }\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.dropdownContent;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) {\n                            newScrollTop -= middleOffset;\n                        }\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) {\n                            newScrollTop += middleOffset;\n                        }\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    } else if (this.options.autoInsertDialCode) {\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else {\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    }\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(fullNumber) {\n                    var number = fullNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) {\n                            label.removeEventListener(\"click\", this._handleLabelClick);\n                        }\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) {\n                        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                    // unbind autoInsertDialCode listeners\n                    if (this.options.autoInsertDialCode) {\n                        if (form) {\n                            form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        }\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"isPossibleNumber\",\n                value: function isPossibleNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (this.selectedCountryData.iso2 !== countryCode) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) {\n                    handleSuccess();\n                }\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) {\n                    handleFailure();\n                }\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"18.5.3\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});","/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = require(\"./build/js/intlTelInput\");\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import intlTelInput from 'intl-tel-input';\n\nconst $ = window.jQuery!;\n\ninterface GPAdvancedPhoneFieldArgs {\n\tfieldId: number;\n\tformId: number;\n\tdefaultCountry?: string;\n\tpreferredCountries?: string[];\n\tcountriesAction?: 'all' | 'include' | 'exclude';\n\tcountries?: string[];\n\tgeoIPFallbackCountry?: string;\n\tgeoIPCacheDuration?: number;\n\tipInfoAPIToken?: string;\n}\n\ninterface GPAdvancedPhoneField extends GPAdvancedPhoneFieldArgs {}\n\nclass GPAdvancedPhoneField implements GPAdvancedPhoneField {\n\tpublic $telInput!: HTMLInputElement;\n\n\tpublic $hiddenInput?: HTMLInputElement;\n\n\tpublic iti!: intlTelInput.Plugin;\n\n\tconstructor(args: GPAdvancedPhoneFieldArgs) {\n\t\tObject.assign(this, args);\n\n\t\tthis.init();\n\t\tthis.bindGPPAListener();\n\t}\n\n\tinit = () => {\n\t\tthis.$telInput = document.querySelector<HTMLInputElement>(\n\t\t\t`#input_${this.formId}_${this.fieldId}`\n\t\t)!;\n\n\t\t// Do not double-init\n\t\tif ($(this.$telInput).closest('.iti').length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.$telInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Save value POSTed to input, so we can preserve it when navigating multi-page forms. */\n\t\tconst postedValue = $(this.$telInput).val();\n\n\t\tthis.disableMask();\n\n\t\tlet initialCountry = this.defaultCountry ?? 'auto';\n\n\t\t// If we have a posted number, set the initial country to US to fix issues with region-less numbers.\n\t\tif (postedValue) {\n\t\t\tinitialCountry = 'us';\n\t\t}\n\n\t\tconst intlTelInputOptions: intlTelInput.Options = {\n\t\t\tinitialCountry: initialCountry.toLowerCase(),\n\t\t\tgeoIpLookup:\n\t\t\t\tinitialCountry === 'auto' ? this.geoIpLookup : undefined,\n\t\t\tpreferredCountries: this.preferredCountries ?? [],\n\t\t\tlocalizedCountries: window.GPAPF?.localizedCountries,\n\t\t\tseparateDialCode: true,\n\t\t\tnationalMode: false,\n\t\t\thiddenInput: 'input_' + this.fieldId, // Generate a hidden input that contains the full number including dialing code.\n\t\t\tutilsScript:\n\t\t\t\twindow.GPAPF.pluginUrl +\n\t\t\t\t'/js/built/gpapf-intl-tel-input-utils.js',\n\t\t};\n\n\t\tif (this.countriesAction === 'exclude') {\n\t\t\tintlTelInputOptions.excludeCountries =\n\t\t\t\tthis.countriesAction === 'exclude' ? this.countries : undefined;\n\t\t} else if (this.countriesAction === 'include') {\n\t\t\tintlTelInputOptions.onlyCountries =\n\t\t\t\tthis.countriesAction === 'include' ? this.countries : undefined;\n\t\t}\n\n\t\t// Change ID and name for current phone field so it conflicts less with hidden field.\n\t\t$(this.$telInput)\n\t\t\t.attr('id', `input_${this.formId}_${this.fieldId}_raw`)\n\t\t\t.attr('name', ``);\n\n\t\t// Update the label to point to the new raw input.\n\t\t$(this.$telInput)\n\t\t\t.closest('.gfield')\n\t\t\t.find('label.gfield_label')\n\t\t\t.attr('for', `input_${this.formId}_${this.fieldId}_raw`);\n\n\t\t/**\n\t\t * Filter the options passed to [intl-tel-input](https://intl-tel-input.com/) during initialization.\n\t\t *\n\t\t * @param {intlTelInput.Options} intlTelInputOptions The intlTelInput options. See https://github.com/jackocnr/intl-tel-input#initialisation-options\n\t\t *                                                   for a full list of the allowed options.\n\t\t * @param {number}               formId              The ID of the current form.\n\t\t * @param {number}               fieldId             The ID of the current field.\n\t\t * @param {GPAdvancedPhoneField} instance            The current instance of GPAdvancedPhoneField.\n\t\t *\n\t\t * @since 1.0.12\n\t\t */\n\t\tthis.iti = intlTelInput(\n\t\t\tthis.$telInput,\n\t\t\twindow.gform.applyFilters(\n\t\t\t\t'gpapf_intltelinput_options',\n\t\t\t\tintlTelInputOptions,\n\t\t\t\tthis.formId,\n\t\t\t\tthis.fieldId,\n\t\t\t\tthis\n\t\t\t)\n\t\t);\n\n\t\t// Prevent Gravity Forms Theme Framework from resetting styles on iti.\n\t\t// @ts-ignore\n\t\t$(this.$telInput)\n\t\t\t.closest('.ginput_container_phone')\n\t\t\t.addClass('gform-theme__no-reset--children');\n\n\t\t// @todo Explore adding RTL support for the Country List. For now, force LTR to avoid RTL weirdness.\n\t\t// @ts-ignore\n\t\tthis.iti.countryList.setAttribute('dir', 'ltr');\n\n\t\t// Add an ID to the hidden field.\n\t\tthis.$hiddenInput = $(this.$telInput).siblings('[type=\"hidden\"]')[0];\n\n\t\t$(this.$hiddenInput).attr('id', `input_${this.formId}_${this.fieldId}`);\n\n\t\tthis.$telInput.addEventListener('keyup', this.formatInputVal);\n\t\tthis.$telInput.addEventListener('input', this.formatInputVal);\n\n\t\tthis.$telInput.addEventListener('keyup', this.updateHiddenInputValue);\n\t\tthis.$telInput.addEventListener('input', this.updateHiddenInputValue);\n\t\tthis.$telInput.addEventListener(\n\t\t\t'countrychange',\n\t\t\tthis.updateHiddenInputValue\n\t\t);\n\n\t\t/* Parent merge tag replacement occurs after Advanced Phone Field has initialized on the frontend. */\n\t\t$(this.$hiddenInput)\n\t\t\t.add(this.$telInput)\n\t\t\t.on('gpnfUpdatedFromParentMergeTag', this.formatInputVal);\n\n\t\t/*\n\t\t * Immediately copy value to hidden input to prevent value from being lost on multi-page forms.\n\t\t * We don't use updateHiddenInputValue() as it requires the phone utils and may not be ready yet.\n\t\t */\n\t\tif (postedValue) {\n\t\t\t$(this.$hiddenInput).val(postedValue);\n\t\t}\n\n\t\t/**\n\t\t * Do something after the phone field is initialized.\n\t\t *\n\t\t * @since 1.0.24\n\t\t *\n\t\t * @param {number}               formId   The ID of the current form.\n\t\t * @param {number}               fieldId  The ID of the current field.\n\t\t * @param {GPAdvancedPhoneField} instance The current instance of GPAdvancedPhoneField.\n\t\t */\n\t\twindow.gform.doAction(\n\t\t\t'gpapf_post_init',\n\t\t\tthis.formId,\n\t\t\tthis.fieldId,\n\t\t\tthis\n\t\t);\n\t};\n\n\tgeoIpLookup = (callback: (countryCode: string) => void): void => {\n\t\tconst fallbackCountry = this.geoIPFallbackCountry ?? 'us';\n\t\tconst cacheKey = `gpapf_geoip[fallback=${fallbackCountry}]`;\n\t\tconst cachedCountryCode = localStorage.getItem(cacheKey);\n\n\t\tif (cachedCountryCode) {\n\t\t\ttry {\n\t\t\t\tconst { countryCode, expires } = JSON.parse(cachedCountryCode);\n\n\t\t\t\t// Check expiry of the value. Delete and disregard the value if it has passed.\n\t\t\t\tif (expires > Date.now()) {\n\t\t\t\t\tcallback(countryCode);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Do nothing, we'll delete later.\n\t\t\t}\n\n\t\t\tlocalStorage.removeItem(cacheKey);\n\t\t}\n\n\t\tconst headers: { [header: string]: string } = {};\n\n\t\tconst token = this.ipInfoAPIToken;\n\n\t\tif (token) {\n\t\t\theaders.Authorization = `Bearer ${token}`;\n\t\t}\n\n\t\tconst cacheDuration = this.geoIPCacheDuration ?? 60 * 60 * 24; // 24 hours in seconds\n\n\t\tjQuery.ajax({\n\t\t\turl: 'https://ipinfo.io',\n\t\t\ttype: 'GET',\n\t\t\tdataType: 'json',\n\t\t\theaders,\n\t\t\tsuccess(resp) {\n\t\t\t\tconst countryCode = resp?.country ?? fallbackCountry;\n\n\t\t\t\tcallback(countryCode);\n\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\tcacheKey,\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tcountryCode,\n\t\t\t\t\t\texpires: Date.now() + 1000 * cacheDuration,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t},\n\t\t\terror() {\n\t\t\t\tcallback(fallbackCountry);\n\t\t\t},\n\t\t});\n\t};\n\n\t/**\n\t * If for some reason the Phone input is masked and not international, remove the mask.\n\t */\n\tdisableMask = () => {\n\t\t$(this.$telInput).trigger('unmask');\n\t};\n\n\tformatInputVal = () => {\n\t\tconst currentNumber = this.getFormattedNumber();\n\n\t\tif (currentNumber) {\n\t\t\t// sometimes the currentText is an object\n\t\t\tthis.iti.setNumber(currentNumber);\n\t\t}\n\t};\n\n\tgetFormattedNumber = (): string | undefined => {\n\t\tif (typeof intlTelInputUtils === 'undefined') {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug('intlTelInputUtils is not loaded.');\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.iti.getNumber(intlTelInputUtils.numberFormat.E164);\n\t};\n\n\t/**\n\t * Update hidden input value as it's normally only done on submission. This allows access by plugins such as\n\t * Copy Cat and Populate Anything.\n\t */\n\tupdateHiddenInputValue = (): void => {\n\t\tif (!this.$hiddenInput) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst formattedNumber = this.getFormattedNumber();\n\n\t\tif (formattedNumber) {\n\t\t\tthis.$hiddenInput.value = formattedNumber;\n\t\t\t$(this.$hiddenInput).trigger('change');\n\t\t}\n\t};\n\n\t/**\n\t * Bind a listener to gppa_updated_batch_fields jQuery event that will reinitialize Advanced Phone when\n\t * the Phone field markup is replaced.\n\t */\n\tbindGPPAListener = () => {\n\t\t$(document).on(\n\t\t\t'gppa_updated_batch_fields',\n\t\t\t(event, formId, updatedFieldIds) => {\n\t\t\t\tif (parseInt(formId) !== this.formId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tupdatedFieldIds = updatedFieldIds.map((fieldId: string) =>\n\t\t\t\t\tparseInt(fieldId)\n\t\t\t\t);\n\n\t\t\t\tif (updatedFieldIds.indexOf(this.fieldId) === -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.init();\n\t\t\t}\n\t\t);\n\t};\n}\n\nwindow.GPAdvancedPhoneField = GPAdvancedPhoneField;\n"],"names":["factory","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_defineProperties","target","props","descriptor","arg","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","String","_toPrimitive","intlTelInputGlobals","getInstance","id","getAttribute","window","instances","documentReady","document","readyState","defaults","allowDropdown","autoInsertDialCode","autoPlaceholder","countrySearch","customContainer","customPlaceholder","dropdownContainer","excludeCountries","fixDropdownWidth","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","showFlags","useFullscreenPopup","navigator","test","userAgent","innerWidth","utilsScript","regionlessNanpNumbers","forEachProp","callback","keys","forEachInstance","method","Iti","options","_this","this","instance","Constructor","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","hasOwnProperty","hadInitialPlaceholder","Boolean","protoProps","_this2","forceShowFlags","body","isRTL","closest","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","dialCodes","_addCountryCode","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","attrs","container","el","createElement","setAttribute","appendChild","classList","add","hasAttribute","form","_this$options","parentClass","concat","wrapper","_createEl","parentNode","insertBefore","showFlagsContainer","flagsContainer","selectedFlag","arguments","source","ownKeys","getOwnPropertySymbols","apply","sym","getOwnPropertyDescriptor","forEach","_objectSpread","role","selectedFlagInner","disabled","selectedDialCode","dropdownArrow","extraClasses","dropdownContent","searchInput","type","placeholder","countryList","_appendListItems","dropdownClasses","dropdown","hiddenInputName","lastIndexOf","className","preferred","idSuffix","listItem","tabindex","node","content","insertAdjacentHTML","attributeValue","inputValue","val","charAt","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options2","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","addEventListener","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","readOnly","_showDropdown","_handleFlagsContainerKeydown","includes","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","numeric","_getNumeric","s","replace","createEvent","initEvent","dispatchEvent","style","width","offsetWidth","remove","_setDropdownPosition","_highlightListItem","firstElementChild","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","positionDropdownAboveInput","_toggleClass","extraTop","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","keyupTimer","_handleSearchChange","inputQuery","trim","_filterCountries","isReset","isFirst","innerHTML","nameLower","fullDialCode","next","previousElementSibling","nextElementSibling","childElementCount","lastElementChild","doFocus","_startsWith","fullNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","plusIndex","substring","alreadySelected","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","_this$options3","prevCountry","_setSelectedCountryFlagTitleAttribute","selectedFlagWidth","_getHiddenSelectedFlagWidth","paddingRight","paddingLeft","_updatePlaceholder","nextItem","querySelector","title","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","removeChild","shouldSetPlaceholder","numberType","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeAttribute","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","newNumber","inputVal","newDialCode","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","numericVal","start","_cap","setCountry","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","isPossibleNumber","originalCountryCode","prototype","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti","_init","module","exports","intlTelInput","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","get","prop","$","jQuery","GPAdvancedPhoneField","args","init","$telInput","formId","fieldId","postedValue","disableMask","intlTelInputOptions","GPAPF","pluginUrl","countriesAction","attr","find","gform","applyFilters","addClass","$hiddenInput","siblings","formatInputVal","updateHiddenInputValue","on","doAction","fallbackCountry","geoIPFallbackCountry","cacheKey","cachedCountryCode","localStorage","getItem","JSON","parse","Date","now","removeItem","headers","token","ipInfoAPIToken","Authorization","cacheDuration","geoIPCacheDuration","ajax","url","dataType","success","resp","setItem","stringify","expires","error","trigger","currentNumber","getFormattedNumber","setNumber","E164","console","debug","formattedNumber","bindGPPAListener","event","updatedFieldIds","assign"],"sourceRoot":""}